#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int allocation[MAX_PROCESSES][MAX_RESOURCES] = {
    {0, 1, 0},
    {2, 0, 0},
    {3, 0, 2},
    {2, 1, 1},
    {0, 0, 2}
};

int max_need[MAX_PROCESSES][MAX_RESOURCES] = {
    {7, 5, 3},
    {3, 2, 2},
    {9, 0, 2},
    {2, 2, 2},
    {4, 3, 3}
};

int available[MAX_RESOURCES] = {3, 3, 2};

bool is_safe_state() {
    int work[MAX_RESOURCES];
    bool finish[MAX_PROCESSES] = {false};
    int safe_sequence[MAX_PROCESSES];
    int i, j;

    for (i = 0; i < MAX_RESOURCES; i++) {
        work[i] = available[i];
    }

    int count = 0;
    while (count < MAX_PROCESSES) {
        bool found = false;
        for (i = 0; i < MAX_PROCESSES; i++) {
            if (!finish[i]) {
                bool can_allocate = true;
                for (j = 0; j < MAX_RESOURCES; j++) {
                    if (max_need[i][j] - allocation[i][j] > work[j]) {
                        can_allocate = false;
                        break;
                    }
                }
                if (can_allocate) {
                    for (j = 0; j < MAX_RESOURCES; j++) {
                        work[j] += allocation[i][j];
                    }
                    finish[i] = true;
                    safe_sequence[count++] = i;
                    found = true;
                }
            }
        }
        if (!found) {
            return false; // Deadlock
        }
    }
    return true; // Safe state
}

int main() {
    if (is_safe_state()) {
        printf("Safe sequence: ");
        for (int i = 0; i < MAX_PROCESSES; i++) {
            printf("%d ", i);
        }
        printf("\n");
    } else {
        printf("Unsafe state\n");
    }
    return 0;
}