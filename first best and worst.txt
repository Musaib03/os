#include <stdio.h>
#define MAX 10

void firstFit(int blockSize[], int m, int processSize[], int n);
void bestFit(int blockSize[], int m, int processSize[], int n);
void worstFit(int blockSize[], int m, int processSize[], int n);
void printAllocation(int allocation[], int processSize[], int n);

int main() {
    int blockSize[MAX] = {100, 500, 200, 300, 600};
    int processSize[MAX] = {212, 417, 112, 426};
    int blockSizeCopy[MAX];  // To keep original block sizes intact for each algorithm
    int m = 5;  // Number of blocks
    int n = 4;  // Number of processes

    int choice;
    printf("Choose the memory allocation algorithm:\n");
    printf("1. First Fit\n");
    printf("2. Best Fit\n");
    printf("3. Worst Fit\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    // Copy block sizes for each algorithm to start with the same initial memory state
    for(int i = 0; i < m; i++) {
        blockSizeCopy[i] = blockSize[i];
    }

    switch(choice) {
        case 1:
            firstFit(blockSizeCopy, m, processSize, n);
            break;
        case 2:
            bestFit(blockSizeCopy, m, processSize, n);
            break;
        case 3:
            worstFit(blockSizeCopy, m, processSize, n);
            break;
        default:
            printf("Invalid choice!\n");
    }

    return 0;
}

void firstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    for(int i = 0; i < n; i++)
        allocation[i] = -1;

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
        }
    }

    printf("\nFirst Fit Allocation:\n");
    printAllocation(allocation, processSize, n);
}

void bestFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    for(int i = 0; i < n; i++)
        allocation[i] = -1;

    for(int i = 0; i < n; i++) {
        int bestIdx = -1;
        for(int j = 0; j < m; j++) {
            if(blockSize[j] >= processSize[i]) {
                if(bestIdx == -1 || blockSize[bestIdx] > blockSize[j])
                    bestIdx = j;
            }
        }

        if(bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }

    printf("\nBest Fit Allocation:\n");
    printAllocation(allocation, processSize, n);
}

void worstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    for(int i = 0; i < n; i++)
        allocation[i] = -1;

    for(int i = 0; i < n; i++) {
        int worstIdx = -1;
        for(int j = 0; j < m; j++) {
            if(blockSize[j] >= processSize[i]) {
                if(worstIdx == -1 || blockSize[worstIdx] < blockSize[j])
                    worstIdx = j;
            }
        }

        if(worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= processSize[i];
        }
    }

    printf("\nWorst Fit Allocation:\n");
    printAllocation(allocation, processSize, n);
}

void printAllocation(int allocation[], int processSize[], int n) {
    printf("Process No.\tProcess Size\tBlock no.\n");
    for(int i = 0; i < n; i++) {
        printf(" %d\t\t%d\t\t", i+1, processSize[i]);
        if(allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}
